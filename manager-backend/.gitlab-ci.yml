include:
  - project: 'devops/modules-gitlabci'
    file: lint/docker-lint.yaml
  - project: 'devops/modules-gitlabci'
    file: swarm/docker-build.yaml

variables:
  ECR_IMG: admrockitback
  #APP_PORT: 3000
  APP_PORT: 80

stages:
  - lint
  - build
  - deploy

deploy-stg:
  stage: deploy
  only:
    - staging
  variables:
    SERVICE_NAME: ${SERVICE_NAME_STG}
    APP_URL: ${APP_URL_STG}
    APP_KEY: ${APP_KEY_STG}
    APP_NAME: ${APP_NAME_STG}
    APP_ENV: ${APP_ENV_STG}
    APP_DEBUG: ${APP_DEBUG_STG}
    URL_PROTOCOL: http://
    URL_ACESSO: ${URL_ACESSO_STG}
    LOG_CHANNEL: ${LOG_CHANNEL_STG}
    LOG_DEPRECATIONS_CHANNEL: ${LOG_DEPRECATIONS_CHANNEL_STG}
    LOG_LEVEL: ${LOG_LEVEL_STG}
    DB_CONNECTION: ${DB_CONNECTION_STG}
    DB_HOST: ${DB_HOST_STG}
    DB_PORT: ${DB_PORT_STG}
    DB_DATABASE: ${DB_DATABASE_STG}
    DB_USERNAME: ${DB_USERNAME_STG}
    DB_PASSWORD: ${DB_PASSWORD_STG}
    BROADCAST_DRIVER: ${BROADCAST_DRIVER_STG}
    CACHE_DRIVER: ${CACHE_DRIVER_STG}
    FILESYSTEM_DISK: ${FILESYSTEM_DISK_STG}
    QUEUE_CONNECTION: ${QUEUE_CONNECTION_STG}
    SESSION_DRIVER: ${SESSION_DRIVER_STG}
    SESSION_LIFETIME: ${SESSION_LIFETIME_STG}
    MEMCACHED_HOST: ${MEMCACHED_HOST_STG}
    REDIS_HOST: ${REDIS_HOST_STG}
    REDIS_PASSWORD: ${REDIS_PASSWORD_STG}
    REDIS_PORT: ${REDIS_PORT_STG}
    MAIL_MAILER: ${MAIL_MAILER_STG}
    MAIL_HOST: ${MAIL_HOST_STG}
    MAIL_PORT: ${MAIL_PORT_STG}
    MAIL_USERNAME: ${MAIL_USERNAME_STG}
    MAIL_PASSWORD: ${MAIL_PASSWORD_STG}
    MAIL_ENCRYPTION: ${MAIL_ENCRYPTION_STG}
    MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS_STG}
    MAIL_FROM_NAME: ${MAIL_FROM_NAME_STG}
    #PUSHER_APP_ID: 
    #PUSHER_APP_KEY:
    #PUSHER_APP_SECRET:
    PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER_STG}
    MIX_PUSHER_APP_KEY: ${MIX_PUSHER_APP_KEY_STG}
    MIX_PUSHER_APP_CLUSTER: ${MIX_PUSHER_APP_CLUSTER_STG}
    JWT_SECRET: ${JWT_SECRET_STG}
    JWT_ALGO: ${JWT_ALGO_STG}
  image:
    name: docker:latest
  services:
    - docker:19-dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
  script:
    - sed -i "s,_ECR_IMG_,${ECR_IMG},g" docker-compose.yaml
    - sed -i "s,_CI_COMMIT_SHORT_SHA_,${CI_COMMIT_SHORT_SHA},g" docker-compose.yaml
    - sed -i "s,_SERVICE_NAME_,${SERVICE_NAME},g" docker-compose.yaml
    - sed -i "s,_APP_PORT_,${APP_PORT},g" docker-compose.yaml
    - sed -i "s,_API_URL_,${APP_URL},g" docker-compose.yaml
    - sed -i "s,_AWS_ACCOUNT_ID_,${AWS_ACCOUNT_ID},g" docker-compose.yaml
    - sed -i "s,_APP_URL_,${APP_URL},g" docker-compose.yaml
    - sed -i "s,_APP_KEY_,${APP_KEY},g" docker-compose.yaml
    - sed -i "s,_APP_NAME_,${APP_NAME},g" docker-compose.yaml
    - sed -i "s,_APP_DEBUG_,${APP_DEBUG},g" docker-compose.yaml
    - sed -i "s,_URL_PROTOCOL_,${URL_PROTOCOL},g" docker-compose.yaml
    - sed -i "s,_APP_ENV_,${APP_ENV},g" docker-compose.yaml
    - sed -i "s,_URL_ACESSO_,${URL_ACESSO},g" docker-compose.yaml
    - sed -i "s,_LOG_CHANNEL_,${LOG_CHANNEL},g" docker-compose.yaml
    - sed -i "s,_LOG_DEPRECATIONS_CHANNEL_,${LOG_DEPRECATIONS_CHANNEL},g" docker-compose.yaml
    - sed -i "s,_LOG_LEVEL_,${LOG_LEVEL},g" docker-compose.yaml
    - sed -i "s,_DB_CONNECTION_,${DB_CONNECTION},g" docker-compose.yaml
    - sed -i "s,_DB_HOST_,${DB_HOST},g" docker-compose.yaml
    - sed -i "s,_DB_PORT_,${DB_PORT},g" docker-compose.yaml
    - sed -i "s,_DB_DATABASE_,${DB_DATABASE},g" docker-compose.yaml
    - sed -i "s,_DB_USERNAME_,${DB_USERNAME},g" docker-compose.yaml
    - sed -i "s,_DB_PASSWORD_,${DB_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_BROADCAST_DRIVER_,${BROADCAST_DRIVER},g" docker-compose.yaml
    - sed -i "s,_CACHE_DRIVER_,${CACHE_DRIVER},g" docker-compose.yaml
    - sed -i "s,_FILESYSTEM_DISK_,${FILESYSTEM_DISK},g" docker-compose.yaml
    - sed -i "s,_QUEUE_CONNECTION_,${QUEUE_CONNECTION},g" docker-compose.yaml
    - sed -i "s,_SESSION_DRIVER_,${SESSION_DRIVER},g" docker-compose.yaml
    - sed -i "s,_SESSION_LIFETIME_,${SESSION_LIFETIME},g" docker-compose.yaml
    - sed -i "s,_MEMCACHED_HOST_,${MEMCACHED_HOST},g" docker-compose.yaml
    - sed -i "s,_REDIS_HOST_,${REDIS_HOST},g" docker-compose.yaml
    - sed -i "s,_MAIL_PORT_,${MAIL_PORT},g" docker-compose.yaml
    - sed -i "s,_REDIS_PASSWORD_,${REDIS_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_REDIS_PORT_,${REDIS_PORT},g" docker-compose.yaml
    - sed -i "s,_MAIL_MAILER_,${MAIL_MAILER},g" docker-compose.yaml
    - sed -i "s,_MAIL_HOST_,${MAIL_HOST},g" docker-compose.yaml
    - sed -i "s,_MAIL_USERNAME_,${MAIL_USERNAME},g" docker-compose.yaml
    - sed -i "s,_MAIL_PASSWORD_,${MAIL_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_MAIL_ENCRYPTION_,${MAIL_ENCRYPTION},g" docker-compose.yaml
    - sed -i "s,_MAIL_FROM_ADDRESS_,${MAIL_FROM_ADDRESS},g" docker-compose.yaml
    - sed -i "s,_MAIL_FROM_NAME_,${MAIL_FROM_NAME},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_ID_,${PUSHER_APP_ID},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_KEY_,${PUSHER_APP_KEY},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_SECRET_,${PUSHER_APP_SECRET},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_CLUSTER_,${PUSHER_APP_CLUSTER},g" docker-compose.yaml
    - sed -i "s,_MIX_PUSHER_APP_KEY_,${MIX_PUSHER_APP_KEY},g" docker-compose.yaml
    - sed -i "s,_MIX_PUSHER_APP_CLUSTER_,${MIX_PUSHER_APP_CLUSTER},g" docker-compose.yaml
    - sed -i "s,_JWT_SECRET_,${JWT_SECRET},g" docker-compose.yaml
    - sed -i "s,_JWT_ALGO_,${JWT_ALGO},g" docker-compose.yaml
    - sed -i "s,_SWARM_NODE_,${SWARM_NODE_STG},g" docker-compose.yaml
    # actions
    - mkdir -p ~/.ssh
    - (umask  077 ; echo $SSH_PRIVATE_KEY_DOCKER_1 | base64 -d > ~/.ssh/10.1.1.173.pem)
    - ssh -i ~/.ssh/10.1.1.173.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@10.1.1.173 mkdir -p /docker-compose/${SERVICE_NAME}
    - scp -i ~/.ssh/10.1.1.173.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose.yaml ubuntu@10.1.1.173:/docker-compose/${SERVICE_NAME}/
    - docker stack deploy --with-registry-auth -c docker-compose.yaml up
  after_script:
    - sleep 15
    - docker service ps up_${SERVICE_NAME} | grep -i running
    - if [ $? == 0 ] ; then exit 0 ; else  exit 1 ; fi
  tags:
    - cntlog


deploy-prd:
  stage: deploy
  only:
    - master
    - main
  variables:
    SERVICE_NAME: ${SERVICE_NAME_PRD}
    APP_URL: ${APP_URL_PRD}
    APP_KEY: ${APP_KEY_PRD}
    APP_NAME: ${APP_NAME_PRD}
    APP_ENV: ${APP_ENV_PRD}
    APP_DEBUG: ${APP_DEBUG_PRD}
    URL_PROTOCOL: http://
    URL_ACESSO: ${URL_ACESSO_PRD}
    LOG_CHANNEL: ${LOG_CHANNEL_PRD}
    LOG_DEPRECATIONS_CHANNEL: ${LOG_DEPRECATIONS_CHANNEL_PRD}
    LOG_LEVEL: ${LOG_LEVEL_PRD}
    DB_CONNECTION: ${DB_CONNECTION_PRD}
    DB_HOST: ${DB_HOST_PRD}
    DB_PORT: ${DB_PORT_PRD}
    DB_DATABASE: ${DB_DATABASE_PRD}
    DB_USERNAME: ${DB_USERNAME_PRD}
    DB_PASSWORD: ${DB_PASSWORD_PRD}
    BROADCAST_DRIVER: ${BROADCAST_DRIVER_PRD}
    CACHE_DRIVER: ${CACHE_DRIVER_PRD}
    FILESYSTEM_DISK: ${FILESYSTEM_DISK_PRD}
    QUEUE_CONNECTION: ${QUEUE_CONNECTION_PRD}
    SESSION_DRIVER: ${SESSION_DRIVER_PRD}
    SESSION_LIFETIME: ${SESSION_LIFETIME_PRD}
    MEMCACHED_HOST: ${MEMCACHED_HOST_PRD}
    REDIS_HOST: ${REDIS_HOST_PRD}
    REDIS_PASSWORD: ${REDIS_PASSWORD_PRD}
    REDIS_PORT: ${REDIS_PORT_PRD}
    MAIL_MAILER: ${MAIL_MAILER_PRD}
    MAIL_HOST: ${MAIL_HOST_PRD}
    MAIL_PORT: ${MAIL_PORT_PRD}
    MAIL_USERNAME: ${MAIL_USERNAME_PRD}
    MAIL_PASSWORD: ${MAIL_PASSWORD_PRD}
    MAIL_ENCRYPTION: ${MAIL_ENCRYPTION_PRD}
    MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS_PRD}
    MAIL_FROM_NAME: ${MAIL_FROM_NAME_PRD}
    #PUSHER_APP_ID: 
    #PUSHER_APP_KEY:
    #PUSHER_APP_SECRET:
    PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER_PRD}
    MIX_PUSHER_APP_KEY: ${MIX_PUSHER_APP_KEY_PRD}
    MIX_PUSHER_APP_CLUSTER: ${MIX_PUSHER_APP_CLUSTER_PRD}
    JWT_SECRET: ${JWT_SECRET_PRD}
    JWT_ALGO: ${JWT_ALGO_PRD}
  image:
    name: docker:latest
  services:
    - docker:19-dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
  script:
    - sed -i "s,_ECR_IMG_,${ECR_IMG},g" docker-compose.yaml
    - sed -i "s,_CI_COMMIT_SHORT_SHA_,${CI_COMMIT_SHORT_SHA},g" docker-compose.yaml
    - sed -i "s,_SERVICE_NAME_,${SERVICE_NAME},g" docker-compose.yaml
    - sed -i "s,_APP_PORT_,${APP_PORT},g" docker-compose.yaml
    - sed -i "s,_API_URL_,${APP_URL},g" docker-compose.yaml
    - sed -i "s,_AWS_ACCOUNT_ID_,${AWS_ACCOUNT_ID},g" docker-compose.yaml
    - sed -i "s,_APP_URL_,${APP_URL},g" docker-compose.yaml
    - sed -i "s,_APP_KEY_,${APP_KEY},g" docker-compose.yaml
    - sed -i "s,_APP_NAME_,${APP_NAME},g" docker-compose.yaml
    - sed -i "s,_APP_DEBUG_,${APP_DEBUG},g" docker-compose.yaml
    - sed -i "s,_URL_PROTOCOL_,${URL_PROTOCOL},g" docker-compose.yaml
    - sed -i "s,_APP_ENV_,${APP_ENV},g" docker-compose.yaml
    - sed -i "s,_URL_ACESSO_,${URL_ACESSO},g" docker-compose.yaml
    - sed -i "s,_LOG_CHANNEL_,${LOG_CHANNEL},g" docker-compose.yaml
    - sed -i "s,_LOG_DEPRECATIONS_CHANNEL_,${LOG_DEPRECATIONS_CHANNEL},g" docker-compose.yaml
    - sed -i "s,_LOG_LEVEL_,${LOG_LEVEL},g" docker-compose.yaml
    - sed -i "s,_DB_CONNECTION_,${DB_CONNECTION},g" docker-compose.yaml
    - sed -i "s,_DB_HOST_,${DB_HOST},g" docker-compose.yaml
    - sed -i "s,_DB_PORT_,${DB_PORT},g" docker-compose.yaml
    - sed -i "s,_DB_DATABASE_,${DB_DATABASE},g" docker-compose.yaml
    - sed -i "s,_DB_USERNAME_,${DB_USERNAME},g" docker-compose.yaml
    - sed -i "s,_DB_PASSWORD_,${DB_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_BROADCAST_DRIVER_,${BROADCAST_DRIVER},g" docker-compose.yaml
    - sed -i "s,_CACHE_DRIVER_,${CACHE_DRIVER},g" docker-compose.yaml
    - sed -i "s,_FILESYSTEM_DISK_,${FILESYSTEM_DISK},g" docker-compose.yaml
    - sed -i "s,_QUEUE_CONNECTION_,${QUEUE_CONNECTION},g" docker-compose.yaml
    - sed -i "s,_SESSION_DRIVER_,${SESSION_DRIVER},g" docker-compose.yaml
    - sed -i "s,_SESSION_LIFETIME_,${SESSION_LIFETIME},g" docker-compose.yaml
    - sed -i "s,_MEMCACHED_HOST_,${MEMCACHED_HOST},g" docker-compose.yaml
    - sed -i "s,_REDIS_HOST_,${REDIS_HOST},g" docker-compose.yaml
    - sed -i "s,_MAIL_PORT_,${MAIL_PORT},g" docker-compose.yaml
    - sed -i "s,_REDIS_PASSWORD_,${REDIS_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_REDIS_PORT_,${REDIS_PORT},g" docker-compose.yaml
    - sed -i "s,_MAIL_MAILER_,${MAIL_MAILER},g" docker-compose.yaml
    - sed -i "s,_MAIL_HOST_,${MAIL_HOST},g" docker-compose.yaml
    - sed -i "s,_MAIL_USERNAME_,${MAIL_USERNAME},g" docker-compose.yaml
    - sed -i "s,_MAIL_PASSWORD_,${MAIL_PASSWORD},g" docker-compose.yaml
    - sed -i "s,_MAIL_ENCRYPTION_,${MAIL_ENCRYPTION},g" docker-compose.yaml
    - sed -i "s,_MAIL_FROM_ADDRESS_,${MAIL_FROM_ADDRESS},g" docker-compose.yaml
    - sed -i "s,_MAIL_FROM_NAME_,${MAIL_FROM_NAME},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_ID_,${PUSHER_APP_ID},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_KEY_,${PUSHER_APP_KEY},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_SECRET_,${PUSHER_APP_SECRET},g" docker-compose.yaml
    - sed -i "s,_PUSHER_APP_CLUSTER_,${PUSHER_APP_CLUSTER},g" docker-compose.yaml
    - sed -i "s,_MIX_PUSHER_APP_KEY_,${MIX_PUSHER_APP_KEY},g" docker-compose.yaml
    - sed -i "s,_MIX_PUSHER_APP_CLUSTER_,${MIX_PUSHER_APP_CLUSTER},g" docker-compose.yaml
    - sed -i "s,_JWT_SECRET_,${JWT_SECRET},g" docker-compose.yaml
    - sed -i "s,_JWT_ALGO_,${JWT_ALGO},g" docker-compose.yaml
    - sed -i "s,_SWARM_NODE_,${SWARM_NODE_STG},g" docker-compose.yaml
    # actions
    - mkdir -p ~/.ssh
    - (umask  077 ; echo $SSH_PRIVATE_KEY_DOCKER_1 | base64 -d > ~/.ssh/10.1.1.173.pem)
    - ssh -i ~/.ssh/10.1.1.173.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@10.1.1.173 mkdir -p /docker-compose/${SERVICE_NAME}
    - scp -i ~/.ssh/10.1.1.173.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose.yaml ubuntu@10.1.1.173:/docker-compose/${SERVICE_NAME}/
    - docker stack deploy --with-registry-auth -c docker-compose.yaml up
  after_script:
    - sleep 15
    - docker service ps up_${SERVICE_NAME} | grep -i running
    - if [ $? == 0 ] ; then exit 0 ; else  exit 1 ; fi
  tags:
    - cntlog




